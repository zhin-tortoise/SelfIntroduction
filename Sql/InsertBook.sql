insert into book values (
    null,
    1,
    '基本情報技術者',
    '基本情報技術者の資格の参考書。
    初めて情報の世界に入った時にお世話になった思い出深い参考書。
    単語がまるでわからなかったため、ノートに単語を書き写して単語と単語の意味を覚えていった。
    コンピュータやデータベース、ネットワークなどの基礎的な内容が履修でき、少しずつ知識を身に着けていった。
    マネジメントや経営戦略についても学習することでき、内容は浅いが幅広く学ぶことができた。
    この本を読むまでは情報のことを全く知らなかったが、この本を読んでからなんとなく情報のことを理解していった。
    ',
    '../picture/basic_qualification.jpg'
);

insert into book values (
    null,
    1,
    '応用情報技術者',
    '応用情報技術者の資格の参考書。
    基本情報技術者の内容よりも、より深い情報の分野の解説がなされている。
    コンピュータやデータベース、ネットワークなどの分野自体は基本情報技術者の資格と変わりないが、基本情報技術者の資格の取得に比べて学習する知識量はとても多かった。
    マネジメントやストラテジ分野も出題され、テクノロジ分野と合わせて出題範囲は広かった。
    難しい資格で情報処理技術者試験のレベル3に位置づけられている。
    資格を取得してから月日が経っているが、この資格を取得する際に学んだ様々な知識は今現在もとても役に立っている。
    ',
    '../picture/application_qualification.jpg'
);

insert into book values (
    null,
    1,
    '情報処理安全確保支援士',
    '情報処理安全確保支援士の資格の参考書。
    情報処理安全確保支援士は情報処理技術者試験のレベル4相当に位置づけられている資格でとても難しい。
    セキュリティ分野の資格であり、セキュリティの専門的な内容が記載されている。
    様々な攻撃手法とその対策方法が記載されており、勉強になることが多かった。
    今現在セキュリティ分野での業務経験がないため、セキュリティの実務に詳しいわけではないが、この資格を取得するうえで様々なセキュリティの知識を身に着けることができた。
    ',
    '../picture/security_qualification.jpg'
);

insert into book values (
    null,
    1,
    'リーダブルコード',
    '読みやすいソースコードについて記載された本。
    この本を読んで変数の名前が重要なことを初めて知り、変数名に気を遣うようになった。
    ネストについても触れられており、ガード説の導入によってネストを浅くする手法が紹介されている。
    本が薄く読みやすい内容ではあるが、Clean CodeやCode Completeなどに比べると内容が薄い。
    まだ新人の頃に読んだ書籍で今でも役立つ内容はあるが、Clean CodeやCode Completeによって同じ内容がより深く紹介おり、新人向けの参考書といった印象がある。
    ',
    '../picture/readable_code.jpg'
);

insert into book values (
    NULL,
    1,
    'パーフェクトPHP',
    'PHPについて書かれた参考書。
    変数の使用方法や関数の定義の仕方、クラスの扱い方などが記載されている。
    この本を読んでPHPの構文や、PHPでのアプリケーションの作成方法を学んだ。
    PHPでのセキュリティ対策についても紹介されており、SQLインジェクションなどの攻撃手法と対応策が掲載されている。
    SQLインジェクションの対策ではプリペアドステートメントを使用して対策することなど、PHPのセキュリティ対策についても学ぶことができた。
    ',
    '../picture/php.jpg'
);

insert into book values (
    null,
    1,
    'シングルページWebアプリケーション',
    'シングルページwebアプリケーションの構築方法について記載された参考書。
    このアプリケーションはjavascriptで構築していくため、構築方法と同時にjavascriptの書き方を学ぶことができた。
    javascriptでのDOMの操作方法や組み立て方、モジュール化の方法を学ぶことができ、これらの学んだことはこの自己紹介webサイトの構築に活かされている。
    この本でjavascript側でDOMを組み立てる設計方法を知り、PHP側だけでなくjavascript側でDOMを管理できることを知り、設計手法に幅を持つことができた。
    ',
    '../picture/single_page_web_application.jpg'
);

insert into book values (
    null,
    1,
    'リファクタリング',
    'リファクタリングについて記載された参考書。
    テストコードの重要性を初めて知るきっかけになった本。
    リファクタリングを行う際には、外部から見た振る舞いが変更されていないことを保証するために、テストコードを書いておく必要があると書かれている。
    この本を読んでから、自分のソースコードを読み直してリファクタリングを行う習慣が身についた。
    簡単なリファクタリングの内、メソッド名の変更、説明用変数の導入、ポリモーフィズムによる条件記述の置き換えなどを実際に行ったことがある。
    様々なリファクタリング手法が記載されているため、普段はリファクタリングのリファレンス本として使用している。',
    '../picture/refactoring.jpg'
);

insert into book values (
    null,
    1,
    '人月の神話',
    'システム開発のマネジメントについて記載した参考書。
    プロジェクトの見積りで使用される人月という単位の誤った考えが説明されており、稼働が上がっているプロジェクトについて新たに人員を増やすことは、逆にプロジェクトの生産性を下げることがこの本で示されている。
    その他にも、セカンドシステム症候群などプロジェクトマネジメントの様々なことについて記載されているが、自分の担当しているソフトウェア開発には直接的に役立つ知識ではなかった。
    しかし、プロジェクトマネジメントについて記載されたこの本を読んだことで、開発者としての新しい分野の知識が深まり、ソフトウェア開発者として幅が広がった。
    ',
    '../picture/the_mythical_man_month.jpg'
);

insert into book values (
    null,
    1,
    '達人プログラマー',
    'より良いプログラマーになるための1冊。
    良いプログラマーになるための様々なプラクティスが記載されている。
    前書きに継続は力なりと記載されており、私が勉強し続けるモチベーションにもなっている。
    プラクティスにはDRY原則やコマンドシェルの使用、ソースコード管理などがある。
    DRY原則はソフトウェア開発の基本であり、重複を削除するという原則だが、この原則はできる限り守って開発を行うようにしている。
    この本を読んでから、簡単な作業はバッチ化して自動化するようになった。開発したバッチはバージョン管理に登録し変更管理も行えるようにしている。
    ',
    '../picture/the_pragmatic_programmer.jpg'
);

insert into book values (
    null,
    1,
    '実践ドメイン駆動設計',
    'ドメイン駆動設計について書かれた参考書。
    ドメインを基にアプリケーションを駆動する開発手法が紹介されている。
    ユビキタス言語という、ドメインで使用される言葉をまとめた用語集を作成することが推奨されており、それを元に開発が進められる。
    ドメインは問題領域と解決領域に分けられ、問題領域ではドメインをサブドメインとそれに伴う境界付けられたコンテキストによって分割して捉える。
    解決領域ではそれぞれのサブドメインを、アプリケーション、エンティティ、バリューオブジェクト、リポジトリなど使用して設計を行う。
    業務ではこの手法を試したことがないため、機会があれば試してみたいと考えている。
    ',
    '../picture/domain_driven.jpg'
);

insert into book values (
    NULL,
    1,
    'SOFTSKILLS',
    'より良い開発者になる方法が書かれた参考書。
    キャリア、マーケティング、独学、生産性、お金、体、心など様々な観点から開発者のキャリアについて記載されている。
    ポモドーロテクニックなどの生産性を高める手法から、失敗することを恐れるななどのメッセージまで幅広く取り扱っている。
    失敗することを恐れるなのメッセージは強く印象に残っており、勉強し続けることや、プログラムを書き続けることのモチベーションの一つになっている。
    また、おすすめの参考書が記載されており、人を動かす、Code Complete、Clean Codeなどが紹介されている。この本の勧めにより人を動かすを読むことにした。
    ',
    '../picture/softskills.jpg'
);

insert into book values (
    null,
    1,
    'CleanCoder',
    'プロのプログラマーについて解説された参考書。
    継続的学習や練習、ドメインを知るなどがプロ意識として挙げられている。
    継続的学習と練習は学習と練習の重要性について記載されており、休みの日などに自分で学習するモチベーションとなっている。
    ドメインを知るは、自分がプログラムを書く対象領域の業務について知るということであり、これまでプロジェクトごとにドメインが異なることが多く、この本を読んでからできるだけ早く業務についても学ぶようになった。
    他にもコードの共同所有などが記載されており、作成したプログラムは個人で所有するのではなく、チームで所有されたほうがいいことなどが記載されており、この本を読んでからコードはチームで所有するものという認識になった。
    ',
    '../picture/clean_coder.jpg'
);

insert into book values (
    null,
    1,
    'CleanCode',
    '優れたプログラミングについて解説された参考書。
    様々な角度から優れたプログラミングを行うための方法が記載されている。
    創発の項目では、ケント・ベックによる単純な設計のための4つの規則が紹介されている。
    そのうちの1つは重複の削除でありDRY原則と呼ばれるものであり、DRY原則に気を使いながらプログラムを書くようになった。
    オブジェクトとデータ構造では、オブジェクト指向と手続き型の特性について記載されており、データ構造が追加されることが多い場合にはオブジェクト指向が適しており、関数が追加されることが多い場合には手続き型が適していることが記載されている。
    この本を読むまではオブジェクト指向の方が優れていると考えていたが、状況によってどちらが優れているかは異なることがわかり、オブジェクト指向と手続き型を使い分けるようになった。
    ',
    '../picture/clean_code.jpg'
);

insert into book values (
    NULL,
    1,
    '人を動かす',
    '人間関係について書かれたビジネス書。
    人を動かす原則や、人に好かれる原則、人を説得する原則などが記載されている。
    人に好かれる原則の中に名前を覚えるというものがあり、この本を読むまではあまり人の名前を意識して覚えようとすることはなかったが、この本を読んでからは人の名前を意識して覚えるようになった。
    人を説得する原則には、議論を避ける、穏やかに話すなどがあり、これらを読んでから自分の話し方を穏やかで受動的なものへと変えた。
    演出の重要性についても記載があった。これまで演出について考えたことがなかったため、新鮮な視点をもたらしてくれた。
    ',
    '../picture/move_people.jpg'
);

insert into book values (
    null,
    1,
    'CleanAgile',
    'アジャイルについて解説された参考書。
    アジャイルの開発手法の1つであるXPに焦点が当てられている。
    XPは約20年前に発表されたものだが、その内容をこの参考書では改めて解説している。
    この本では、アジャイルは小さなことをしている小さなプログラミングチームの小さな問題を扱う小さなアイデアと解説している。
    それまで、私はアジャイルを開発手法の1つとしてしか認識しておらず、大規模な問題に対してのアイデアではないということは、この本を読んで初めて知ることになった。
    XPの12のプラクティスについて解説されており、特にテクニカルプラクティスの比重が多い。
    テスト駆動開発、リファクタリング、シンプルな設計、ペアプログラミングがテクニカルプラクティスの中に入っており、これらの技術が1つの枠組みの中にあることがこの本を読んでわかった。
    ',
    '../picture/clean_agile.jpg'
);

insert into book values (
    null,
    1,
    'すごいHASKELL',
    'HASKELLについて書かれた参考書。
    HASKELLの構文や関数型言語の考えについて解説されている。
    型という概念など、phpやjavascriptなどの弱い型付け言語ではあまり話題にならないところが解説されており、これまでにはない知識を得ることができた。
    型や型クラスを自分で定義してプログラムを構築することは、これまで行ったことがなかったため新鮮な驚きがあった。
    しかし、全体的にHASKELLは難しく、またモナドを理解することができず、HASKELLでアプリケーションが書けるようにはならなかった。
    純粋関数型言語の考え方を学ぶことができ、型や型クラス、関数でプログラムを組み立てる経験を得ることができよかった。再帰や高階関数も改めて学ぶことができた。
    ',
    '../picture/haskell.jpg'
);

insert into book values (
    NULL,
    1,
    'テスト駆動開発',
    'テスト駆動開発について書かれた参考書。
    動作するきれいなコードを作成する方法が記載されている。
    この技法では、レッド、グリーン、リファクタリングの順序でプログラミングを進めていく。
    レッドでは、まず動作しないテストコードを先に書くことを行う。
    次にグリーンでは、テストコードを通す実装を仮実装、明白な実装を使用して作成する。
    最後にリファクタリングでは、グリーンにするために発生した重複を削除する。
    この手法を使用して開発した実務経験はないが、色々な書籍でこの開発手法が進められているため、この手法で開発してみたいと考えている。
    ',
    '../picture/test_driven.jpg'
);

insert into book values (
    NULL,
    1,
    'Code Complete',
    'プログラムの実装について幅広く書かれた本。
    クラスの作成方法やルーチンの作成方法、変数の使用方法やステートメントの使用、コメントのレイアウトなどについて記載されている。
    ルーチンの凝集度に種類があり、機能的凝集度が最も理想的なルーチンだと初めて知った。この本を読んでからルーチンの作成の際には凝集度に気を使うようになった。
    全体的に、この本を読んでから保守性を優先するようになった。
    パフォーマンスよりもまず保守性を優先し、後からパフォーマンスを測定してプログラムを改修するほうがいいことを知った。
    コメントのレイアウトでも保守性が優先されることを知り、見栄えよりも保守性を優先するようになった。
    ',
    '../picture/code_complete.jpg'
);

insert into book values (
    null,
    2,
    'テスト用',
    'テスト用です。',
    '../picture/basic_qualification.jpg'
)